package projectEuler;

import utility.Utilities;

/**
 *
 * Date: 09-29-16
 * @author MadChemist
 *
 * Question:
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Answer:  76576500
 */
public class Problem12 {

    public static void main(String[] args) {
        /*
         * http://code.jasonbhill.com/sage/project-euler-problem-12/
         */
        int divisorMax = 500;
        int n = 1;
        /*[i = 1 to n] SUM(n(n+1)/2)*/
        //define n as the left number
        int lNum = Utilities.getNumDivisors(n);
        //define n+1 as the right number
        int rNum = Utilities.getNumDivisors(n+1);
        //as long as the lNum * rNum is less than our max
        while(lNum * rNum < divisorMax){
            n+=1;   //increment our start num
            lNum = rNum;    //leftNum is now equal to rightNum
            rNum = Utilities.getNumDivisors(n+1);  //reassign right Num
        }
        /*Our sum is our current found n(n+1)/2*/
        int sum = (n * (n+1))/2;
        System.out.println(sum);
    }
}
